# File: backend/app/schemas/chatbot.py
from pydantic import BaseModel, ConfigDict
from datetime import datetime
from typing import Optional # Optional might be needed for update schemas later

# --- Base Schema ---
# Contains common fields shared between creation and reading.
class ChatbotBase(BaseModel):
    name: str
    # Add other non-sensitive fields here if needed in the future
    # description: Optional[str] = None

# --- Create Schema ---
# Inherits from Base, used specifically for creating a new chatbot via the API.
# Only includes fields the user needs to provide during creation.
class ChatbotCreate(ChatbotBase):
    # We don't ask for owner_id here; we'll get it from the authenticated user later.
    # We don't ask for created_at; the database sets it.
    pass # No additional fields needed beyond ChatbotBase for now

# --- Update Schema --- (We'll use this later)
# class ChatbotUpdate(ChatbotBase):
#     name: Optional[str] = None # Make fields optional for partial updates
#     # ... other updatable fields

# --- Read Schema (Response Model) ---
# Inherits from Base, used for returning chatbot data via the API.
# Includes fields generated by the database (id, created_at, owner_id).
class Chatbot(ChatbotBase):
    id: int
    owner_id: int # Include the owner's ID in the response
    created_at: datetime

    # Pydantic V2 configuration: enable ORM mode
    # This tells Pydantic to read data even if it's not a dict,
    # but an ORM model (like our SQLAlchemy Chatbot model).
    model_config = ConfigDict(from_attributes=True)