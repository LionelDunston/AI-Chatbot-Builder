# File: docker-compose.yml
version: '3.8' # Specifies the Compose file version

services: # Defines the different containers (services) in your application
  backend: # The name of our backend service
    build: ./backend # Tells Compose to build an image using the Dockerfile in the ./backend directory
    ports:
      # Maps port 8000 on your host machine to port 80 inside the container
      # Format: "HOST_PORT:CONTAINER_PORT"
      - "8000:80"
    volumes:
      # Mounts the local ./backend directory into the container's /app directory
      # This allows code changes locally to be reflected inside the container immediately
      - ./backend/app:/code/app
    environment:
      # Define environment variables for the backend to connect to the DB
      # Format: postgresql+asyncpg://USER:PASSWORD@HOST:PORT/DB_NAME
      # 'db' is the service name of our postgres container below
      - DATABASE_URL=postgresql+asyncpg://user:password@db:5432/appdb
      # IMPORTANT: Change the default secret key! Generate a secure random string.
      - SECRET_KEY=a_very_very_insecure_default_secret_key_CHANGE_ME
    depends_on:
      db:
        condition: service_healthy # Wait for the DB healthcheck to pass
    networks: # Define a network for services to communicate
      - app-network

  db: # Name of our PostgreSQL database service
    image: postgres:15-alpine # Use official Postgres image (version 15, alpine is smaller)
    volumes:
      # Persist database data outside the container using a named volume
      - postgres_data:/var/lib/postgresql/data/
    environment:
      # Set environment variables for the PostgreSQL container itself
      # These create the default user, password, and database on first startup
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password # IMPORTANT: Use a strong password in a real project!
      - POSTGRES_DB=appdb
    ports:
      # Optional: Map PostgreSQL port 5432 inside container to 5433 on your host machine
      # This allows you to connect directly using a DB tool (like DBeaver, pgAdmin)
      - "5433:5432"
    healthcheck: # Check if the database is ready to accept connections
        test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
        interval: 5s
        timeout: 5s
        retries: 5
    networks:
      - app-network

volumes: # Define the named volume for database data persistence
  postgres_data:

networks: # Define the network that allows services to communicate
  app-network:
    driver: bridge