version: '3.8'

services:
  backend:
    build: ./backend
    ports:
      - "8000:80"
    volumes:
      # Standardizing to /app - MAKE SURE Dockerfile WORKDIR matches!
      - ./backend/app:/app
      # Mount shared upload volume (optional, define below)
      # - uploads:/app/uploads
    environment:
      # Format: postgresql+asyncpg://USER:PASSWORD@HOST:PORT/DB_NAME
      - DATABASE_URL=postgresql+asyncpg://user:password@db:5432/appdb
      # Load SECRET_KEY from host environment or use default (CHANGE DEFAULT!)
      - SECRET_KEY=${SECRET_KEY:-a_very_very_insecure_default_secret_key_CHANGE_ME}
      # Correctly formatted Celery URLs
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis: # Add dependency on Redis
        condition: service_started # Basic check for Redis
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password # Use strong password
      - POSTGRES_DB=appdb
    ports:
      - "5433:5432" # Host:Container
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # --- ADDED: Redis Service ---
  redis:
    image: redis:7-alpine
    networks:
      - app-network
    # Optional healthcheck for Redis if needed
    # healthcheck:
    #   test: ["CMD", "redis-cli", "ping"]
    #   interval: 5s
    #   timeout: 3s
    #   retries: 5

  # --- ADDED: Celery Worker Service ---
  worker:
    build: ./backend # Use same build context as backend
    # Command points to where celery_app is defined in your code
    command: celery -A app.worker.celery_app worker --loglevel=info
    volumes:
      # Mount code same as backend
      - ./backend/app:/app
      # Mount shared upload volume (optional)
      # - uploads:/app/uploads
    environment:
      # Needs same environment variables as backend
      - DATABASE_URL=postgresql+asyncpg://user:password@db:5432/appdb
      - SECRET_KEY=${SECRET_KEY:-a_very_very_insecure_default_secret_key_CHANGE_ME}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis: # Depends on Redis broker
        condition: service_started
      db: # Depends on DB if tasks access it
        condition: service_healthy
    networks:
      - app-network

  # --- (Optional) ADDED: Celery Flower Monitor ---
  flower:
    image: mher/flower
    command: celery --broker=redis://redis:6379/0 flower --port=5555
    ports:
      - "5555:5555" # Access Flower UI at http://localhost:5555
    depends_on:
      - redis
      - worker # Logically depends on worker being up
    networks:
      - app-network

volumes:
  postgres_data:
  # Define optional shared volume for uploads
  # uploads:

networks:
  app-network:
    driver: bridge